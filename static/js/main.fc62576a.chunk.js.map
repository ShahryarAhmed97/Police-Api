{"version":3,"sources":["components/Dashboard.js","components/Forces.js","components/CrimeCategories.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","react_default","a","createElement","Component","Forces","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","forcesArr","result","text","_this2","fetch","then","response","json","res","setState","console","log","e","filter","val","name","substr","length","toLowerCase","indexOf","_this3","_this$state","showTable","className","placeholder","value","onChange","inpVal","target","style","boxShadow","padding","backgroundColor","color","map","inx","id","crimeCat","url","CenteredTabs","handleChange","event","classes","props","Paper_default","root","Tabs_default","indicatorColor","textColor","centered","Tab_default","label","Dashboard_Dashboard","Forces_Forces","CrimeCategories_Forces","React","withStyles","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc62576a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Dashborad</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\n\r\nexport default class Forces extends Component {\r\nconstructor(){\r\n    super();\r\n    this.state={\r\n        forcesArr:[],//initializing array to hold fecthing data\r\n        result:[],//initializing array to hold resulting data\r\n        text:'',//to control input value \r\n\r\n\r\n    }\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\n    fetch('https://data.police.uk/api/forces')//fetching data from api \r\n    .then(response => response.json())//converting fething response into json\r\n    .then(res => this.setState({forcesArr:res}))//assigning response into array\r\n    console.log(this.state.forcesArr)\r\n\r\n}\r\n\r\n//function for Seacrhing user input\r\ninpVal(e){\r\n    const {forcesArr}=this.state;//destructring  forcesArr \r\n    \r\n    //filtering the input given by user serially\r\n   const result= forcesArr.filter((val)=>{\r\n       //converting each value in forcesArr and obtaining sub string then converting both value\r\n       // and user input into lower case and using the indexOf function  checking if the sub string \r\n       //is matching with user input or not   \r\n\r\n        return val.name.substr(0,e.length).toLowerCase().indexOf(e.toLowerCase())!==-1  \r\n    })\r\n    this.setState({result,text:e})//setting the result into state and assigning user input into text state \r\n\r\n}\r\n\r\n\r\n  \r\n    \r\nrender() {\r\n    const {forcesArr,result,text}=this.state //destructring \r\n    //if result is ready and text have a length <0 then assign result into showTable else assign forcesArr\r\n    const showTable=result.length && text.length ? result : forcesArr \r\n    return (\r\n      <div>\r\n                <h1>Forces</h1>\r\n                { console.log(this.state.forcesArr)}\r\n                <div className='input-group col-md-4 offset-md-4' >\r\n                    <input className='form-control' placeholder='Search Forces by Name Here ...'  value={text} onChange={(e)=>this.inpVal(e.target.value)} />\r\n                </div>\r\n                <br />\r\n                <br />\r\n\r\n\r\n             <table className=\"col-md-8 offset-md-2\" style={{boxShadow:'0px 0px 10px grey',padding:'40px'}} > \r\n                 <thead >\r\n                     <tr style={{backgroundColor:'black',color:'white',}}>\r\n                         <td style={{padding:'10px'}}><h2>ID</h2></td>\r\n                         <td style={{padding:'10px'}}><h2>Name</h2></td>\r\n                     </tr>\r\n\r\n                 </thead>\r\n\r\n                 <tbody>\r\n                 {\r\n                     //running map on showtable to show the final output to user either search result or complete forces Arr\r\n                     showTable.map((val,inx)=>{\r\n                       return(\r\n\r\n                           <tr>\r\n                            <td style={{padding:'10px'}}>\r\n                               <b> {val.id}</b>\r\n                            </td>\r\n                            <td style={{padding:'10px'}}>\r\n                            <b> {val.name}</b>\r\n                         \r\n                            </td>\r\n                        </tr> \r\n                     ) \r\n                     })\r\n                 }\r\n                     \r\n                     \r\n                 </tbody>\r\n\r\n             </table>\r\n\r\n                \r\n\r\n                \r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\n\r\n\r\nexport default class Forces extends Component {\r\nconstructor(){\r\n    super();\r\n    this.state={\r\n        crimeCat:[],//initializing array to hold fecthing data\r\n\r\n        result:[],//initializing array to hold resulting data\r\n        text:'',//to control input value\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\n    fetch('https://data.police.uk/api/crime-categories')//fetching data from api \r\n    .then(response => response.json())\r\n    .then(res => this.setState({crimeCat:res}))//converting fething response into json\r\n    console.log(this.state.crimeCat)//assigning response into array\r\n\r\n}\r\n\r\n//function for Seacrhing user input\r\ninpVal(e){\r\n    const {crimeCat}=this.state;//destructring  forcesArr \r\n     //converting each value in crimeCat and obtaining sub string then converting both value\r\n       // and user input into lower case and using the indexOf function  checking if the sub string \r\n       //is matching with user input or not \r\n   const result= crimeCat.filter((val)=>{\r\n        return val.name.substr(0,e.length).toLowerCase().indexOf(e.toLowerCase())!==-1\r\n    })\r\n    this.setState({result,text:e}) //setting the result into state and assigning user input into text state \r\n\r\n}\r\n\r\n\r\n  \r\n    \r\nrender() {\r\n    const {crimeCat,result,text}=this.state//destructring\r\n        //if result is ready and text have a length <0 then assign result into showTable else assign forcesArr\r\n\r\n    const showTable=result.length && text.length ? result : crimeCat\r\n    return (\r\n      <div>\r\n                <h1>Crime Categories </h1>\r\n                { console.log(this.state.crimeCat)}\r\n                <div className='input-group col-md-4 offset-md-4' >\r\n                    <input className='form-control' placeholder='Search Crime Categories by Name Here ...'   value={text} onChange={(e)=>this.inpVal(e.target.value)} />\r\n                </div>\r\n                <br /> \r\n                <br />\r\n\r\n\r\n             <table className=\"col-md-8 offset-md-2\" style={{boxShadow:'0px 0px 10px grey',padding:'40px'}} > \r\n                 <thead >\r\n                     <tr style={{backgroundColor:'black',color:'white',}}>\r\n                         <td style={{padding:'10px'}}><h2>URL</h2></td>\r\n                         <td><h2>Name</h2></td>\r\n                     </tr>\r\n\r\n                 </thead>\r\n\r\n                 <tbody>\r\n                 {\r\n                     showTable.map((val,inx)=>{\r\n                       return(\r\n\r\n                           <tr >\r\n                            <td style={{padding:'10px'}}>\r\n                               <b> {val.url}</b>\r\n                            </td>\r\n                            <td style={{padding:'10px'}}>\r\n                            <b> {val.name}</b>\r\n                         \r\n                            </td>\r\n                        </tr> \r\n                     ) \r\n                     })\r\n                 }\r\n                     \r\n                     \r\n                 </tbody>\r\n\r\n             </table>\r\n\r\n                \r\n\r\n                \r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Dashboard from './components/Dashboard'\nimport Forces from './components/Forces';\nimport CrimeCategories from './components/CrimeCategories';\n\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nclass CenteredTabs extends React.Component {\n  state = {\n    value: 0,\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n      <Paper className={classes.root}>\n        <Tabs\n          value={this.state.value}\n          onChange={this.handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          centered\n        >\n          <Tab label=\"Dashboard\" />\n          <Tab label=\"Forces\" />\n          <Tab label=\"Crime Categories\" />\n        </Tabs>\n      </Paper>\n\n     {//if tab 0 is selected then show Dashborad compponent\n       this.state.value===0 &&\n\n     <Dashboard />\n     } \n     {//if tab1 is selected then  show Forces component\n       this.state.value===1 &&\n       <Forces />\n\n     }\n     {//if tab2 is selected then show CrimeCategories component\n       this.state.value===2 &&\n       <CrimeCategories />\n\n     }\n\n\n      </div>\n    );\n  }\n}\n\nCenteredTabs.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CenteredTabs);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}